BASIC SOLUTIONS
===============

JUnit on the class path
=======================
Problem: org.junit is not found during compilation of the test sources
Reason: (?) the test sources are considered to be part of the module. Modular code can't read from the class path

Correction: the above only applies if junit is in the Maven dependencies (as well). Excluding it there does the trick.


Specially marked test classes, JUnit on the module path
=======================================================
- Then junit has to be required (or does it?)

Problem: test (sub)packages not opened to junit, so junit fails at runtime
Exporting them doesn't work, as they are marked as test classes, not included in the built package




OBSERVED ERRORS
===============
IllegalAccessException at test runtime (in Eclipse)
---------------------------------------------------
Exception caused by: class org.junit.runners.BlockJUnit4ClassRunner (in module junit) cannot access class nl.utwente.groove.test.algebra.AlgebrasTest (in module nl.utwente.groove) because module nl.utwente.groove does not export nl.utwente.groove.test.algebra to module junit

Circumstances:
- Test classes are marked as such
- The test being run is the test suite CheckinTests, which tries to run tests from a different package
- "Dependencies" are set to --add-modules ALL-SYSTEM

Apparent cause: when running a test this way, Eclipse does not open other packages to junit than the one in which the test is located

Solution: add --add-opens nl.utwente.groove/nl.utwente.groove.test.xxx=ALL-UNNAMED for all test subpackages xxx


Test classes marked as erroneous
--------------------------------
Test classes are marked as erroneous at compile time when opening them in the editor, yet they are in fact compiled and run fine as tests. Als the errors are not propagated to the project level view.

Circumstances:
- Test classes are marked as such on the 
- JUnit is on module path
- junit is not required in module-info

Apparent cause: the test classes are part of the module and rely on junit, so they require junit when the project is on the module path. The fact that they are marked as test classes does not make a difference here

Modification: This problem is gone when junit is no longer among the Maven dependencies. This was achieved using exlusion.


Tests can't be run from Maven
-----------------------------
Maven reports "Failed to run the ecj compiler: Unrecognized option : --patch-module". I don't think this is true, as Eclipse manages to path the module for testing just fine. However, I'm stumped.

UPDATE: According to the comment I received to my StackOverflow question (https://stackoverflow.com/questions/74208293/maven-error-failed-to-run-the-ecj-compiler-unrecognized-option-patch-modul), ecj really doesn't support --patch-module. See also https://help.eclipse.org/2022-09/topic/org.eclipse.jdt.doc.user/tasks/task-using_batch_compiler.htm?cp=1_3_8_0 which supports this.

The only solution I currently see (short of reverting to the standard javac) is to run tests directly from Eclipse, and skip them during the Maven build.



