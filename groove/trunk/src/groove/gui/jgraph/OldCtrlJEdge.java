package groove.gui.jgraph;

import groove.control.CtrlAut;
import groove.control.CtrlTransition;
import groove.graph.Edge;
import groove.gui.look.Look;
import groove.io.HTMLConverter;
import groove.util.Groove;

/**
 * JEdge class that describes the underlying edge as a graph transition.
 * @author Tom Staijen
 * @version $Revision $
 */
public class OldCtrlJEdge extends
        AJEdge<CtrlAut,OldCtrlJGraph,JModel<CtrlAut>,OldCtrlJVertex> {
    /** Constructor for a prototype object. */
    private OldCtrlJEdge() {
        // empty
    }

    @Override
    public CtrlTransition getEdge() {
        return (CtrlTransition) super.getEdge();
    }

    @Override
    public boolean isCompatible(Edge edge) {
        return super.isCompatible(edge)
            && ((CtrlTransition) edge).isInitial() == getEdge().isInitial();
    }

    @Override
    StringBuilder getEdgeKindDescription() {
        return new StringBuilder("transition");
    }

    @Override
    String getLabelDescription() {
        StringBuffer result = new StringBuffer(", generated by ");
        String[] displayedLabels = new String[getEdges().size()];
        int labelIndex = 0;
        for (Object part : getEdges()) {
            CtrlTransition trans = (CtrlTransition) part;
            String description;
            description = trans.label().text();
            displayedLabels[labelIndex] =
                HTMLConverter.STRONG_TAG.on(description, true);
            labelIndex++;
        }
        if (displayedLabels.length == 1) {
            result.append(displayedLabels[0]);
        } else {
            result.append(Groove.toString(displayedLabels, "<br>- ", "",
                "<br>- "));
        }
        return result.toString();
    }

    @Override
    protected Look getStructuralLook() {
        Look result;
        boolean omega = getEdge().getCall().isOmega();
        boolean exitsRecipe =
            getEdge().isInitial() && getEdge().source().isTransient();
        if (exitsRecipe) {
            result = omega ? Look.CTRL_OMEGA_EXIT_TRANS : Look.CTRL_EXIT_TRANS;
        } else {
            result = omega ? Look.CTRL_OMEGA_TRANS : Look.BASIC;
        }
        return result;
    }

    /** 
     * Returns a fresh, uninitialised instance.
     * Call {@link #setJModel} to initialise.
     */
    public static OldCtrlJEdge newInstance() {
        return new OldCtrlJEdge();
    }
}