package groove.gui.jgraph;

import static groove.gui.jgraph.JAttr.LTS_EDGE_ACTIVE_CHANGE;
import static groove.gui.jgraph.JAttr.LTS_EDGE_ATTR;
import groove.graph.Label;
import groove.lts.DerivationLabel;
import groove.lts.GraphState;
import groove.lts.GraphTransition;
import groove.util.Converter;
import groove.util.Groove;

import org.jgraph.graph.AttributeMap;

/**
 * JEdge class that describes the underlying edge as a graph transition.
 * @author Arend Rensink
 * @version $Revision $
 */
public class LTSJEdge extends GraphJEdge<GraphState,GraphTransition> {
    /**
     * Creates a new instance from a given edge (required to be a
     * {@link GraphTransition}).
     */
    LTSJEdge(LTSJModel jModel, GraphTransition edge) {
        super(jModel, edge);
    }

    @Override
    public LTSJModel getJModel() {
        return (LTSJModel) super.getJModel();
    }

    @Override
    StringBuilder getEdgeKindDescription() {
        return new StringBuilder("transition");
    }

    @Override
    String getLabelDescription() {
        StringBuffer result = new StringBuffer(", generated by ");
        String[] displayedLabels = new String[getEdges().size()];
        int labelIndex = 0;
        for (Object part : getEdges()) {
            GraphTransition trans = (GraphTransition) part;
            String description;
            if (getJModel().isShowAnchors()) {
                description = trans.getEvent().toString();
            } else {
                description = trans.getEvent().getRule().getName().toString();
            }
            displayedLabels[labelIndex] =
                Converter.STRONG_TAG.on(description, true);
            labelIndex++;
        }
        if (displayedLabels.length == 1) {
            result.append(displayedLabels[0]);
        } else {
            result.append(Groove.toString(displayedLabels, "<br>- ", "",
                "<br>- "));
        }
        return result.toString();
    }

    /**
     * This implementation returns either the transition label, or the event
     * label, depending on #isShowAnchors().
     */
    @Override
    public Label getLabel(GraphTransition edge) {
        return getJModel().isShowAnchors() ? new DerivationLabel(
            edge.getEvent()) : super.getLabel(edge);
    }

    /** Indicates that this edge is active. */
    final boolean isActive() {
        return this.active;
    }

    /** Changes the active status of this edge.
     * @return {@code true} if the active status changed as a result of this call.
     */
    final boolean setActive(boolean active) {
        boolean result = active != this.active;
        if (result) {
            this.active = active;
            createAttributes(getJModel());
        }
        return result;
    }

    @Override
    protected AttributeMap createAttributes() {
        AttributeMap result = LTS_EDGE_ATTR.clone();
        if (isActive()) {
            result.applyMap(LTS_EDGE_ACTIVE_CHANGE);
        }
        return result;
    }

    private boolean active;
}