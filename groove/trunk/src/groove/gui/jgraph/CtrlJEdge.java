package groove.gui.jgraph;

import groove.control.CtrlTransition;
import groove.graph.Edge;
import groove.gui.jgraph.JAttr.AttributeMap;
import groove.lts.GraphTransition;
import groove.util.Converter;
import groove.util.Groove;

/**
 * JEdge class that describes the underlying edge as a graph transition.
 * @author Tom Staijen
 * @version $Revision $
 */
public class CtrlJEdge extends GraphJEdge {
    /** Constructor for a prototype object. */
    CtrlJEdge(CtrlJGraph jGraph) {
        super(jGraph);
    }

    /**
     * Creates a new instance from a given edge (required to be a
     * {@link GraphTransition}).
     */
    CtrlJEdge(CtrlJGraph jGraph, CtrlTransition edge) {
        super(jGraph, edge);
    }

    @Override
    public CtrlJGraph getJGraph() {
        return (CtrlJGraph) super.getJGraph();
    }

    @Override
    public CtrlJEdge newJEdge(Edge<?> edge) {
        return new CtrlJEdge(getJGraph(), (CtrlTransition) edge);
    }

    @Override
    public CtrlTransition getEdge() {
        return (CtrlTransition) super.getEdge();
    }

    @Override
    StringBuilder getEdgeKindDescription() {
        return new StringBuilder("transition");
    }

    @Override
    String getLabelDescription() {
        StringBuffer result = new StringBuffer(", generated by ");
        String[] displayedLabels = new String[getEdges().size()];
        int labelIndex = 0;
        for (Object part : getEdges()) {
            CtrlTransition trans = (CtrlTransition) part;
            String description;
            description = trans.label().text();
            displayedLabels[labelIndex] =
                Converter.STRONG_TAG.on(description, true);
            labelIndex++;
        }
        if (displayedLabels.length == 1) {
            result.append(displayedLabels[0]);
        } else {
            result.append(Groove.toString(displayedLabels, "<br>- ", "",
                "<br>- "));
        }
        return result.toString();
    }

    @Override
    protected AttributeMap createAttributes() {
        AttributeMap result;
        if (!(getEdge()).label().getGuard().isEmpty()) {
            result = JAttr.CONTROL_FAILURE_EDGE_ATTR.clone();
        } else {
            result = JAttr.CONTROL_EDGE_ATTR.clone();
        }
        return result;
    }

    /** Returns a prototype {@link CtrlJEdge} for a given {@link CtrlJGraph}. */
    public static CtrlJEdge getPrototype(CtrlJGraph jGraph) {
        return new CtrlJEdge(jGraph);
    }
}