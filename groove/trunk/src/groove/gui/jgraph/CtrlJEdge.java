package groove.gui.jgraph;

import groove.control.CtrlState;
import groove.control.CtrlTransition;
import groove.lts.GraphTransition;
import groove.util.Converter;
import groove.util.Groove;

import org.jgraph.graph.AttributeMap;

/**
 * JEdge class that describes the underlying edge as a graph transition.
 * @author Tom Staijen
 * @version $Revision $
 */
public class CtrlJEdge extends GraphJEdge<CtrlState,CtrlTransition> {
    /**
     * Creates a new instance from a given edge (required to be a
     * {@link GraphTransition}).
     */
    CtrlJEdge(CtrlJModel jModel, CtrlTransition edge) {
        super(jModel, edge);
    }

    @Override
    StringBuilder getEdgeKindDescription() {
        return new StringBuilder("transition");
    }

    @Override
    String getLabelDescription() {
        StringBuffer result = new StringBuffer(", generated by ");
        String[] displayedLabels = new String[getUserObject().size()];
        int labelIndex = 0;
        for (Object part : getUserObject()) {
            CtrlTransition trans = (CtrlTransition) part;
            String description;
            description = trans.label().text();
            displayedLabels[labelIndex] =
                Converter.STRONG_TAG.on(description, true);
            labelIndex++;
        }
        if (displayedLabels.length == 1) {
            result.append(displayedLabels[0]);
        } else {
            result.append(Groove.toString(displayedLabels, "<br>- ", "",
                "<br>- "));
        }
        return result.toString();
    }

    @Override
    protected AttributeMap createAttributes() {
        AttributeMap result;
        if (!getEdge().label().getGuard().isEmpty()) {
            result = JAttr.CONTROL_FAILURE_EDGE_ATTR.clone();
        } else {
            result = JAttr.CONTROL_EDGE_ATTR.clone();
        }
        return result;
    }
}