package groove.gui.chscenar;

import groove.explore.result.ExploreCondition;
import groove.trans.GraphGrammar;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JLabel;

/** 
 *
 * @author  Iovka Boneva
 */
@Deprecated
@SuppressWarnings("all")
public class ScenarioSelectionPanel extends javax.swing.JPanel {

    /** Creates new form ScenarioSelectionPanel */
    public ScenarioSelectionPanel(JFrame owner, GraphGrammar grammar) {
        setOwner(owner);
        setGrammar(grammar);
        initComponents();
        model.setStrategy(getStrategyChoice());
        model.setAcceptor(getAcceptorChoice());
        model.setResult(getResultChoice());
        status.actionPerformed(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        findPanel = new javax.swing.JPanel();
        acceptorComboBox = new javax.swing.JComboBox();
        javax.swing.JLabel l2 = new javax.swing.JLabel();
        acceptorPropertiesButton = new javax.swing.JButton();
        resultComboBox = new javax.swing.JComboBox();
        javax.swing.JLabel l1 = new javax.swing.JLabel();
        explorePanel = new javax.swing.JPanel();
        strategyComboBox = new javax.swing.JComboBox();
        javax.swing.JLabel l3 = new javax.swing.JLabel();
        strategyPropertiesButton = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();

        jLabel1.setText("jLabel1");

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        findPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Find"));
        findPanel.setPreferredSize(new java.awt.Dimension(500, 100));

        acceptorComboBox.setModel(new ChoiceComboBoxModel(AcceptorChoice.class));
        acceptorComboBox.setRenderer(new ChoiceComboBoxCellRenderer());
        acceptorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptorComboBoxActionPerformed(evt);
            }
        });

        l2.setLabelFor(acceptorComboBox);
        l2.setText("Look for");

        acceptorPropertiesButton.setText("Properties...");
        acceptorPropertiesButton.setEnabled(false);
        acceptorPropertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptorPropertiesButtonActionPerformed(evt);
            }
        });

        resultComboBox.setModel(new ChoiceComboBoxModel(ResultChoice.class));
        resultComboBox.setRenderer(new ChoiceComboBoxCellRenderer());
        resultComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultComboBoxActionPerformed(evt);
            }
        });

        l1.setLabelFor(resultComboBox);
        l1.setText("How many");

        javax.swing.GroupLayout findPanelLayout = new javax.swing.GroupLayout(findPanel);
        findPanel.setLayout(findPanelLayout);
        findPanelLayout.setHorizontalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l2)
                    .addComponent(l1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultComboBox, 0, 186, Short.MAX_VALUE)
                    .addComponent(acceptorComboBox, 0, 186, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(acceptorPropertiesButton)
                .addContainerGap())
        );
        findPanelLayout.setVerticalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l2)
                    .addComponent(acceptorPropertiesButton)
                    .addComponent(acceptorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l1)
                    .addComponent(resultComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(findPanel);

        explorePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Explore"));
        explorePanel.setPreferredSize(new java.awt.Dimension(500, 80));

        strategyComboBox.setModel(new ChoiceComboBoxModel(StrategyChoice.class));
        strategyComboBox.setRenderer(new ChoiceComboBoxCellRenderer());
        strategyComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strategyComboBoxActionPerformed(evt);
            }
        });

        l3.setLabelFor(strategyComboBox);
        l3.setText("Strategy");

        strategyPropertiesButton.setText("Properties...");
        strategyPropertiesButton.setEnabled(false);
        strategyPropertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strategyPropertiesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout explorePanelLayout = new javax.swing.GroupLayout(explorePanel);
        explorePanel.setLayout(explorePanelLayout);
        explorePanelLayout.setHorizontalGroup(
            explorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(explorePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(l3)
                .addGap(26, 26, 26)
                .addComponent(strategyComboBox, 0, 187, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(strategyPropertiesButton)
                .addContainerGap())
        );
        explorePanelLayout.setVerticalGroup(
            explorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(explorePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(explorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l3)
                    .addComponent(strategyPropertiesButton)
                    .addComponent(strategyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        add(explorePanel);

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        statusPanel.setMaximumSize(null);
        statusPanel.setMinimumSize(null);
        statusPanel.setPreferredSize(new java.awt.Dimension(500, 40));
        statusPanel.setLayout(new java.awt.BorderLayout());
        add(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

private void acceptorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptorComboBoxActionPerformed
    model.setAcceptor(getAcceptorChoice());
    acceptorPropertiesButton.setEnabled(model.requireAcceptorProperties());
    status.actionPerformed(evt);
}//GEN-LAST:event_acceptorComboBoxActionPerformed

private void strategyComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strategyComboBoxActionPerformed
    model.setStrategy(getStrategyChoice());
    strategyPropertiesButton.setEnabled(model.requireStrategyProperties());
    status.actionPerformed(evt);
}//GEN-LAST:event_strategyComboBoxActionPerformed

private void acceptorPropertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptorPropertiesButtonActionPerformed
    ExploreCondition<?> cond = showExploreConditionChoiceDialog();
    model.setAcceptorExplCond(cond);
    status.actionPerformed(evt);
}//GEN-LAST:event_acceptorPropertiesButtonActionPerformed

private void strategyPropertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strategyPropertiesButtonActionPerformed
    ExploreCondition<?> cond = showExploreConditionChoiceDialog();
    model.setStrategyExplCond(cond);
    status.actionPerformed(evt);
}//GEN-LAST:event_strategyPropertiesButtonActionPerformed

private void resultComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultComboBoxActionPerformed
    model.setResult(getResultChoice());
    status.actionPerformed(evt);
}//GEN-LAST:event_resultComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox acceptorComboBox;
    private javax.swing.JButton acceptorPropertiesButton;
    private javax.swing.JPanel explorePanel;
    private javax.swing.JPanel findPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox resultComboBox;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JComboBox strategyComboBox;
    private javax.swing.JButton strategyPropertiesButton;
    // End of variables declaration//GEN-END:variables

    // ----------------------------------------------------------------------
    // NON GUI METHODS
    // ----------------------------------------------------------------------
    /** The grammar for which the scenario is being constructed. */
    private GraphGrammar grammar;
    /** The owner frame. */
    private JFrame owner;
  
    private GraphGrammar getGrammar () {
        return this.grammar;
    }
    private void setGrammar (GraphGrammar grammar) {
        this.grammar = grammar;
    }
    private JFrame getOwner() {
        return owner;
    }
    private void setOwner(JFrame owner) {
        this.owner = owner;
    }
// 
    
    // ----------------------------------------------------------------------
    // HELPER GUI METHODS
    // ----------------------------------------------------------------------
    /** A model for the underlying currently constructed scenario. */
    private ScenarioSelectionModel model = new ScenarioSelectionModel();
    /** Controls the status panel, w.r.t. the model. */
    private Status status = new Status();
    
    /** The model associated to this panel. */
    public ScenarioSelectionModel getModel () {
        return model;
    }
    
    /** The currently selected strategy */
    private StrategyChoice getStrategyChoice () {
        return (StrategyChoice) strategyComboBox.getSelectedItem();
    }
    
    /** The currently selected acceptor. */
    private AcceptorChoice getAcceptorChoice () {
        return (AcceptorChoice) acceptorComboBox.getSelectedItem();
    }
     
    /** The currently selected result. */
    private ResultChoice getResultChoice () {
        return (ResultChoice) resultComboBox.getSelectedItem();        
    }
       
    private ExploreCondition<?> showExploreConditionChoiceDialog() {
        ExploreConditionSelectionDialog dialog = new ExploreConditionSelectionDialog(getOwner(), getGrammar());
        ExploreCondition<?> cond = dialog.showDialog();
        return cond;
    }
 
 
    /** Controls the status bar. 
     * The best would be to add it as listener to all
     * the components that may change the status, but
     * the gui does not allow this.
     */
    class Status implements ActionListener {
        
        /** A status message, is default color. */
        private JLabel statusMessage = new JLabel();
        /** An error message, is red. */
        private JLabel errorMessage = new JLabel();

        Status () {
            errorMessage.setForeground(Color.red);
        }
        
        
        private void updateStatus() {
            errorMessage.setText("");
            statusMessage.setText("");
            
            ScenarioSelectionModel.ScenarioSelectionStatus status =
                    model.getStatus();
            
            
            if (status.isAcceptableConfiguration()) {
                errorMessage.setText(status.getStatusText());
            } else {
                statusMessage.setText(status.getStatusText());
            }
            
        }
        public void actionPerformed(ActionEvent evt) {
            updateStatus();
            updateStatusBar();  
        }
        
        /** Adds the status message to the status panel.
         * To be called inside #actionPerformed
         */
        private void updateStatusBar () {
            statusPanel.setVisible(false);
            statusPanel.removeAll();
            if (errorMessage.getText().length() != 0) {
                statusPanel.add(errorMessage);
            } else if (statusMessage.getText().length() != 0) {
                statusPanel.add(statusMessage);
            }
            statusPanel.setVisible(true);
        }
        
    }
    
    
}
