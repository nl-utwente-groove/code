/*
 * ScenarioChooserPanel.java
 * 
 * Created on June 24, 2008, 12:16 PM
 */

package groove.gui.chscenar;

import groove.explore.Scenario;
import groove.io.AspectGxl;
import groove.io.ExtensionFilter;
import groove.io.FileGps;
import groove.io.GrooveFileChooser;
import groove.trans.GraphGrammar;
import groove.util.Groove;
import groove.view.DefaultGrammarView;
import groove.view.aspect.AspectGraph;

import java.awt.Component;
import java.io.File;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * A panel allowing to create and run a scenario. Allows to load a grammar,
 * create a scenario, run it, and save the results.
 * 
 * @author Iovka Boneva
 */
public class ScenarioChooserPanel extends javax.swing.JPanel {

    /** Creates new form ScenarioChooserPanel */
    public ScenarioChooserPanel(JFrame owner) {
        this.owner = owner;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {

        this.scenarioSelectionButtonGroup = new javax.swing.ButtonGroup();
        this.loadGrammarPanel = new javax.swing.JPanel();
        this.grammarFileNameTextField = new javax.swing.JTextField();
        this.grammarBrowseButton = new javax.swing.JButton();
        javax.swing.JLabel l1 = new javax.swing.JLabel();
        javax.swing.JLabel l2 = new javax.swing.JLabel();
        this.startGraphFileNameTextField = new javax.swing.JTextField();
        this.startStateBrowseButton = new javax.swing.JButton();
        this.loadGrammarButton = new javax.swing.JButton();
        this.chooseScenarioPanel = new javax.swing.JPanel();
        this.loadSavedScenarioRadioButton = new javax.swing.JRadioButton();
        this.createScenarioRadioButton = new javax.swing.JRadioButton();
        this.goButton = new javax.swing.JButton();
        this.storeResultsPanel = new javax.swing.JPanel();
        javax.swing.JLabel l3 = new javax.swing.JLabel();
        this.resultsFolderTextField = new javax.swing.JTextField();
        this.resultFolderBrowseButton = new javax.swing.JButton();
        javax.swing.JLabel l4 = new javax.swing.JLabel();
        this.ltsFileNameTextField = new javax.swing.JTextField();
        javax.swing.JLabel l5 = new javax.swing.JLabel();
        this.resultGraphPrefixTextField = new javax.swing.JTextField();

        setLayout(new javax.swing.BoxLayout(this,
            javax.swing.BoxLayout.PAGE_AXIS));

        this.loadGrammarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph grammar"));
        this.loadGrammarPanel.setMaximumSize(null);
        this.loadGrammarPanel.setMinimumSize(null);
        this.loadGrammarPanel.setPreferredSize(new java.awt.Dimension(550, 120));

        this.grammarFileNameTextField.setColumns(20);

        this.grammarBrowseButton.setText("Browse ...");
        this.grammarBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grammarBrowseButtonActionPerformed(evt);
            }
        });

        l1.setLabelFor(this.grammarFileNameTextField);
        l1.setText("Production system");

        l2.setLabelFor(this.startGraphFileNameTextField);
        l2.setText("Start graph");

        this.startGraphFileNameTextField.setColumns(20);

        this.startStateBrowseButton.setText("Browse ...");
        this.startStateBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStateBrowseButtonActionPerformed(evt);
            }
        });

        this.loadGrammarButton.setText("Load grammar");
        this.loadGrammarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGrammarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loadGrammarPanelLayout =
            new javax.swing.GroupLayout(this.loadGrammarPanel);
        this.loadGrammarPanel.setLayout(loadGrammarPanelLayout);
        loadGrammarPanelLayout.setHorizontalGroup(loadGrammarPanelLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            loadGrammarPanelLayout.createSequentialGroup().addContainerGap().addGroup(
                loadGrammarPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.LEADING).addComponent(l1).addComponent(
                    l2)).addPreferredGap(
                javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                loadGrammarPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(
                    this.grammarFileNameTextField).addComponent(
                    this.startGraphFileNameTextField,
                    javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)).addGroup(
                loadGrammarPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                    loadGrammarPanelLayout.createSequentialGroup().addPreferredGap(
                        javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                        loadGrammarPanelLayout.createParallelGroup(
                            javax.swing.GroupLayout.Alignment.TRAILING).addComponent(
                            this.loadGrammarButton).addComponent(
                            this.startStateBrowseButton,
                            javax.swing.GroupLayout.DEFAULT_SIZE, 124,
                            Short.MAX_VALUE))).addGroup(
                    loadGrammarPanelLayout.createSequentialGroup().addGap(5, 5,
                        5).addComponent(this.grammarBrowseButton,
                        javax.swing.GroupLayout.DEFAULT_SIZE, 125,
                        Short.MAX_VALUE))).addContainerGap()));
        loadGrammarPanelLayout.setVerticalGroup(loadGrammarPanelLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            loadGrammarPanelLayout.createSequentialGroup().addGroup(
                loadGrammarPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.BASELINE).addComponent(l1).addComponent(
                    this.grammarBrowseButton).addComponent(
                    this.grammarFileNameTextField,
                    javax.swing.GroupLayout.PREFERRED_SIZE,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
                javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                loadGrammarPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.BASELINE).addComponent(l2).addComponent(
                    this.startStateBrowseButton).addComponent(
                    this.startGraphFileNameTextField,
                    javax.swing.GroupLayout.PREFERRED_SIZE,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
                javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
                this.loadGrammarButton).addContainerGap(
                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        add(this.loadGrammarPanel);

        this.chooseScenarioPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Explore scenario"));
        this.chooseScenarioPanel.setMaximumSize(null);
        this.chooseScenarioPanel.setMinimumSize(null);
        this.chooseScenarioPanel.setPreferredSize(new java.awt.Dimension(550,
            60));

        this.scenarioSelectionButtonGroup.add(this.loadSavedScenarioRadioButton);
        this.loadSavedScenarioRadioButton.setText("Load saved scenario");
        this.loadSavedScenarioRadioButton.setEnabled(false);

        this.scenarioSelectionButtonGroup.add(this.createScenarioRadioButton);
        this.createScenarioRadioButton.setSelected(true);
        this.createScenarioRadioButton.setText("Create scenario");
        this.createScenarioRadioButton.setEnabled(false);

        this.goButton.setText("Go ...");
        this.goButton.setEnabled(false);
        this.goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chooseScenarioPanelLayout =
            new javax.swing.GroupLayout(this.chooseScenarioPanel);
        this.chooseScenarioPanel.setLayout(chooseScenarioPanelLayout);
        chooseScenarioPanelLayout.setHorizontalGroup(chooseScenarioPanelLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            chooseScenarioPanelLayout.createSequentialGroup().addContainerGap().addComponent(
                this.createScenarioRadioButton).addGap(38, 38, 38).addComponent(
                this.loadSavedScenarioRadioButton).addPreferredGap(
                javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87,
                Short.MAX_VALUE).addComponent(this.goButton,
                javax.swing.GroupLayout.PREFERRED_SIZE, 124,
                javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
        chooseScenarioPanelLayout.setVerticalGroup(chooseScenarioPanelLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            chooseScenarioPanelLayout.createSequentialGroup().addGroup(
                chooseScenarioPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.BASELINE).addComponent(
                    this.createScenarioRadioButton).addComponent(
                    this.loadSavedScenarioRadioButton).addComponent(
                    this.goButton)).addContainerGap(13, Short.MAX_VALUE)));

        add(this.chooseScenarioPanel);

        this.storeResultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Store results"));
        this.storeResultsPanel.setMaximumSize(null);
        this.storeResultsPanel.setMinimumSize(null);
        this.storeResultsPanel.setPreferredSize(new java.awt.Dimension(550, 120));

        l3.setLabelFor(this.resultsFolderTextField);
        l3.setText("Results folder");

        this.resultsFolderTextField.setColumns(20);

        this.resultFolderBrowseButton.setText("Browse...");
        this.resultFolderBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultFolderBrowseButtonActionPerformed(evt);
            }
        });

        l4.setText("LTS file name");

        this.ltsFileNameTextField.setColumns(10);
        this.ltsFileNameTextField.setText("lts");

        l5.setText("Result prefix");

        this.resultGraphPrefixTextField.setColumns(10);
        this.resultGraphPrefixTextField.setText("result");

        javax.swing.GroupLayout storeResultsPanelLayout =
            new javax.swing.GroupLayout(this.storeResultsPanel);
        this.storeResultsPanel.setLayout(storeResultsPanelLayout);
        storeResultsPanelLayout.setHorizontalGroup(storeResultsPanelLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            storeResultsPanelLayout.createSequentialGroup().addContainerGap().addGroup(
                storeResultsPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.LEADING).addComponent(l3).addComponent(
                    l4).addComponent(l5)).addGap(42, 42, 42).addGroup(
                storeResultsPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.LEADING).addComponent(
                    this.resultGraphPrefixTextField,
                    javax.swing.GroupLayout.PREFERRED_SIZE,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(
                    storeResultsPanelLayout.createSequentialGroup().addComponent(
                        this.resultsFolderTextField,
                        javax.swing.GroupLayout.PREFERRED_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(
                        javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
                        this.resultFolderBrowseButton)).addComponent(
                    this.ltsFileNameTextField,
                    javax.swing.GroupLayout.PREFERRED_SIZE,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(
                81, Short.MAX_VALUE)));
        storeResultsPanelLayout.setVerticalGroup(storeResultsPanelLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            storeResultsPanelLayout.createSequentialGroup().addGroup(
                storeResultsPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.BASELINE).addComponent(
                    this.resultsFolderTextField,
                    javax.swing.GroupLayout.PREFERRED_SIZE,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(l3).addComponent(
                    this.resultFolderBrowseButton)).addPreferredGap(
                javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                storeResultsPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.BASELINE).addComponent(l4).addComponent(
                    this.ltsFileNameTextField,
                    javax.swing.GroupLayout.PREFERRED_SIZE,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
                javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                storeResultsPanelLayout.createParallelGroup(
                    javax.swing.GroupLayout.Alignment.BASELINE).addComponent(l5).addComponent(
                    this.resultGraphPrefixTextField,
                    javax.swing.GroupLayout.PREFERRED_SIZE,
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(
                23, Short.MAX_VALUE)));

        add(this.storeResultsPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void grammarBrowseButtonActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_grammarBrowseButtonActionPerformed
        JFileChooser chooser = getGrammarFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.grammarFileNameTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }// GEN-LAST:event_grammarBrowseButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_goButtonActionPerformed
        doCreateScenario();
    }// GEN-LAST:event_goButtonActionPerformed

    private void startStateBrowseButtonActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_startStateBrowseButtonActionPerformed
        JFileChooser chooser = getStateFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.startGraphFileNameTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }// GEN-LAST:event_startStateBrowseButtonActionPerformed

    private void resultFolderBrowseButtonActionPerformed(
            java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resultFolderBrowseButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.resultsFolderTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }// GEN-LAST:event_resultFolderBrowseButtonActionPerformed

    private void loadGrammarButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadGrammarButtonActionPerformed
        if (doLoadGrammar()) {
            enableScenarioSelection(true);
        }
    }// GEN-LAST:event_loadGrammarButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chooseScenarioPanel;
    private javax.swing.JRadioButton createScenarioRadioButton;
    private javax.swing.JButton goButton;
    private javax.swing.JButton grammarBrowseButton;
    private javax.swing.JTextField grammarFileNameTextField;
    private javax.swing.JButton loadGrammarButton;
    private javax.swing.JPanel loadGrammarPanel;
    private javax.swing.JRadioButton loadSavedScenarioRadioButton;
    private javax.swing.JTextField ltsFileNameTextField;
    private javax.swing.JButton resultFolderBrowseButton;
    private javax.swing.JTextField resultGraphPrefixTextField;
    private javax.swing.JTextField resultsFolderTextField;
    private javax.swing.ButtonGroup scenarioSelectionButtonGroup;
    private javax.swing.JTextField startGraphFileNameTextField;
    private javax.swing.JButton startStateBrowseButton;
    private javax.swing.JPanel storeResultsPanel;
    // End of variables declaration//GEN-END:variables

    // -----------------------------------------------------------------------
    // NON GUI METHODS
    // -----------------------------------------------------------------------
    private final ExtensionFilter ruleSystemFilter =
        groove.util.Groove.createRuleSystemFilter();
    private GraphGrammar grammar;
    private final FileGps grammarLoader = new FileGps(false);
    private Scenario scenario;

    /**
     * The scenario that has been selected. Null if no valid scenario was
     * selected.
     */
    public Scenario getSelectedScenario() {
        return this.scenario;
    }

    /**
     * The grammar that has been selected. Null if no valid grammar was
     * selected.
     */
    public GraphGrammar getSelectedGrammar() {
        return this.grammar;
    }

    /**
     * Loads the grammar corresponding to the the file which name is in the
     * #grammarFileNameTextField Has as effect to initialise the #grammar if
     * loading went well. Also invalidates the scenario.
     * @return true if the grammar was initialised correctly, false otherwise
     */
    boolean doLoadGrammar() {
        String grammarLocation =
            this.ruleSystemFilter.addExtension(getGrammarFileName());
        File grammarFile = new File(grammarLocation);
        File startGraphFile = null;
        String startGraphName = getStartGraphFileName();
        if (!startGraphName.equals("")) {
            startGraphFile = new File(startGraphName);
        }
        try {
            DefaultGrammarView grammarView =
                this.grammarLoader.unmarshal(grammarFile);
            if (startGraphFile != null) {
                AspectGraph startGraph =
                    new AspectGxl().unmarshalGraph(startGraphFile);
                grammarView.setStartGraph(startGraph);
            }
            if (grammarView.getStartGraphView() == null) {
                showErrorDialog("The grammar does not have a start graph. Please select one.");
                return false;
            }
            this.grammar = grammarView.toGrammar();
            this.scenario = null; // reset the scenario
            return true;
        } catch (IOException ex) {
            showErrorDialog(ex.getMessage());
            return false;
        } catch (groove.view.FormatException ex) {
            showErrorDialog(ex.getMessage());
            return false;
        }
    }

    void doCreateScenario() {
        String grammarFileName = getGrammarFileName();
        if (grammarFileName == null || grammarFileName.equals("")) {
            showErrorDialog("Please choose a grammar first.");
            return;
        }
        assert this.grammar != null : "The grammar should not be null at that point";
        if (isCreateScenarioSelected()) {
            ScenarioSelectionDialog sd =
                new ScenarioSelectionDialog(this.owner, this.grammar);
            this.scenario = sd.showDialog();
        } else {
            // Scenario should be loaded
            throw new UnsupportedOperationException("Not yet supported");
        }

    }

    // -----------------------------------------------------------------------
    // HELPER GUI METHODS
    // -----------------------------------------------------------------------
    private final JFrame owner;

    private JFileChooser grammarFileChooser;
    private JFileChooser stateFileChooser;

    /**
     * Returns the file chooser for grammar (GPR) files, lazily creating it
     * first.
     */
    private JFileChooser getGrammarFileChooser() {
        if (this.grammarFileChooser == null) {
            this.grammarFileChooser = new GrooveFileChooser();
            this.grammarFileChooser.setAcceptAllFileFilterUsed(false);
            this.grammarFileChooser.setFileFilter(this.grammarLoader.getExtensionFilter());
            this.grammarFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        return this.grammarFileChooser;
    }

    /**
     * Returns the file chooser for graphs (GST) files, lazily creating it
     * first.
     */
    private JFileChooser getStateFileChooser() {
        if (this.stateFileChooser == null) {
            this.stateFileChooser = new GrooveFileChooser();
            ExtensionFilter stateFilter = Groove.createStateFilter();
            this.stateFileChooser.addChoosableFileFilter(stateFilter);
            this.stateFileChooser.addChoosableFileFilter(Groove.createGxlFilter());
            this.stateFileChooser.setFileFilter(stateFilter);
        }
        return this.stateFileChooser;
    }

    private void showErrorDialog(String message) {
        JOptionPane.showMessageDialog(this, message, "Error",
            JOptionPane.ERROR_MESSAGE);
    }

    private String getGrammarFileName() {
        return this.grammarFileNameTextField.getText();
    }

    private String getStartGraphFileName() {
        return this.startGraphFileNameTextField.getText();
    }

    /** A folder name where results are to be stored. */
    public String getResultsFolderName() {
        return this.resultsFolderTextField.getText();
    }

    /** A prefix for the file where the lts is to be stored. */
    public String getLtsFileNamePrefix() {
        return this.ltsFileNameTextField.getText();
    }

    /** A prefix for the files where the result graphs are to be stored. */
    public String getResultFileNamePrefix() {
        return this.resultGraphPrefixTextField.getText();
    }

    /**
     * Returns true if the create scenario option is chosen, and false if the
     * load scenario option is chosen.
     */
    private boolean isCreateScenarioSelected() {
        return this.createScenarioRadioButton.isSelected();
    }

    private void enableScenarioSelection(boolean b) {
        for (Component c : this.chooseScenarioPanel.getComponents()) {
            c.setEnabled(b);
        }
    }

}
