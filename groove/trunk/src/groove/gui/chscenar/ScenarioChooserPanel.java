/*
 * ScenarioChooserPanel.java
 *
 * Created on June 24, 2008, 12:16 PM
 */

package groove.gui.chscenar;

import java.io.IOException;
import javax.swing.JFileChooser;
import groove.io.GrooveFileChooser;
import groove.trans.GraphGrammar;
import java.io.File;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import groove.explore.Scenario;
import groove.io.AspectGxl;
import groove.io.ExtensionFilter;
import groove.io.FileGps;
import groove.util.Groove;
import groove.view.AspectualGraphView;
import groove.view.DefaultGrammarView;
import groove.view.aspect.AspectGraph;
import java.awt.Component;

/** A panel allowing to create and run a scenario. 
 * Allows to load a grammar, create a scenario, run it, and save the results.
 * 
 * @author Iovka Boneva
 */
public class ScenarioChooserPanel extends javax.swing.JPanel {

    /** Creates new form ScenarioChooserPanel */
    public ScenarioChooserPanel(JFrame owner) {
        this.owner = owner;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scenarioSelectionButtonGroup = new javax.swing.ButtonGroup();
        loadGrammarPanel = new javax.swing.JPanel();
        grammarFileNameTextField = new javax.swing.JTextField();
        grammarBrowseButton = new javax.swing.JButton();
        javax.swing.JLabel l1 = new javax.swing.JLabel();
        javax.swing.JLabel l2 = new javax.swing.JLabel();
        startGraphFileNameTextField = new javax.swing.JTextField();
        startStateBrowseButton = new javax.swing.JButton();
        loadGrammarButton = new javax.swing.JButton();
        chooseScenarioPanel = new javax.swing.JPanel();
        loadSavedScenarioRadioButton = new javax.swing.JRadioButton();
        createScenarioRadioButton = new javax.swing.JRadioButton();
        goButton = new javax.swing.JButton();
        storeResultsPanel = new javax.swing.JPanel();
        javax.swing.JLabel l3 = new javax.swing.JLabel();
        resultsFolderTextField = new javax.swing.JTextField();
        resultFolderBrowseButton = new javax.swing.JButton();
        javax.swing.JLabel l4 = new javax.swing.JLabel();
        ltsFileNameTextField = new javax.swing.JTextField();
        javax.swing.JLabel l5 = new javax.swing.JLabel();
        resultGraphPrefixTextField = new javax.swing.JTextField();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        loadGrammarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph grammar"));
        loadGrammarPanel.setMaximumSize(null);
        loadGrammarPanel.setMinimumSize(null);
        loadGrammarPanel.setPreferredSize(new java.awt.Dimension(550, 120));

        grammarFileNameTextField.setColumns(20);

        grammarBrowseButton.setText("Browse ...");
        grammarBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grammarBrowseButtonActionPerformed(evt);
            }
        });

        l1.setLabelFor(grammarFileNameTextField);
        l1.setText("Production system");

        l2.setLabelFor(startGraphFileNameTextField);
        l2.setText("Start graph");

        startGraphFileNameTextField.setColumns(20);

        startStateBrowseButton.setText("Browse ...");
        startStateBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStateBrowseButtonActionPerformed(evt);
            }
        });

        loadGrammarButton.setText("Load grammar");
        loadGrammarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGrammarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loadGrammarPanelLayout = new javax.swing.GroupLayout(loadGrammarPanel);
        loadGrammarPanel.setLayout(loadGrammarPanelLayout);
        loadGrammarPanelLayout.setHorizontalGroup(
            loadGrammarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadGrammarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loadGrammarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l1)
                    .addComponent(l2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loadGrammarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(grammarFileNameTextField)
                    .addComponent(startGraphFileNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addGroup(loadGrammarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loadGrammarPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(loadGrammarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loadGrammarButton)
                            .addComponent(startStateBrowseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)))
                    .addGroup(loadGrammarPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(grammarBrowseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)))
                .addContainerGap())
        );
        loadGrammarPanelLayout.setVerticalGroup(
            loadGrammarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadGrammarPanelLayout.createSequentialGroup()
                .addGroup(loadGrammarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l1)
                    .addComponent(grammarBrowseButton)
                    .addComponent(grammarFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loadGrammarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l2)
                    .addComponent(startStateBrowseButton)
                    .addComponent(startGraphFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadGrammarButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(loadGrammarPanel);

        chooseScenarioPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Explore scenario"));
        chooseScenarioPanel.setMaximumSize(null);
        chooseScenarioPanel.setMinimumSize(null);
        chooseScenarioPanel.setPreferredSize(new java.awt.Dimension(550, 60));

        scenarioSelectionButtonGroup.add(loadSavedScenarioRadioButton);
        loadSavedScenarioRadioButton.setText("Load saved scenario");
        loadSavedScenarioRadioButton.setEnabled(false);

        scenarioSelectionButtonGroup.add(createScenarioRadioButton);
        createScenarioRadioButton.setSelected(true);
        createScenarioRadioButton.setText("Create scenario");
        createScenarioRadioButton.setEnabled(false);

        goButton.setText("Go ...");
        goButton.setEnabled(false);
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chooseScenarioPanelLayout = new javax.swing.GroupLayout(chooseScenarioPanel);
        chooseScenarioPanel.setLayout(chooseScenarioPanelLayout);
        chooseScenarioPanelLayout.setHorizontalGroup(
            chooseScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseScenarioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createScenarioRadioButton)
                .addGap(38, 38, 38)
                .addComponent(loadSavedScenarioRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        chooseScenarioPanelLayout.setVerticalGroup(
            chooseScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseScenarioPanelLayout.createSequentialGroup()
                .addGroup(chooseScenarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createScenarioRadioButton)
                    .addComponent(loadSavedScenarioRadioButton)
                    .addComponent(goButton))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        add(chooseScenarioPanel);

        storeResultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Store results"));
        storeResultsPanel.setMaximumSize(null);
        storeResultsPanel.setMinimumSize(null);
        storeResultsPanel.setPreferredSize(new java.awt.Dimension(550, 120));

        l3.setLabelFor(resultsFolderTextField);
        l3.setText("Results folder");

        resultsFolderTextField.setColumns(20);

        resultFolderBrowseButton.setText("Browse...");
        resultFolderBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultFolderBrowseButtonActionPerformed(evt);
            }
        });

        l4.setText("LTS file name");

        ltsFileNameTextField.setColumns(10);
        ltsFileNameTextField.setText("lts");

        l5.setText("Result prefix");

        resultGraphPrefixTextField.setColumns(10);
        resultGraphPrefixTextField.setText("result");

        javax.swing.GroupLayout storeResultsPanelLayout = new javax.swing.GroupLayout(storeResultsPanel);
        storeResultsPanel.setLayout(storeResultsPanelLayout);
        storeResultsPanelLayout.setHorizontalGroup(
            storeResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storeResultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(storeResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l3)
                    .addComponent(l4)
                    .addComponent(l5))
                .addGap(42, 42, 42)
                .addGroup(storeResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultGraphPrefixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(storeResultsPanelLayout.createSequentialGroup()
                        .addComponent(resultsFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultFolderBrowseButton))
                    .addComponent(ltsFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        storeResultsPanelLayout.setVerticalGroup(
            storeResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(storeResultsPanelLayout.createSequentialGroup()
                .addGroup(storeResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultsFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l3)
                    .addComponent(resultFolderBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(storeResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l4)
                    .addComponent(ltsFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(storeResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l5)
                    .addComponent(resultGraphPrefixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        add(storeResultsPanel);
    }// </editor-fold>//GEN-END:initComponents

private void grammarBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grammarBrowseButtonActionPerformed
    JFileChooser chooser = getGrammarFileChooser();
    int returnVal = chooser.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
        grammarFileNameTextField.setText(chooser.getSelectedFile().getAbsolutePath());
    }
}//GEN-LAST:event_grammarBrowseButtonActionPerformed

private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
    doCreateScenario();
}//GEN-LAST:event_goButtonActionPerformed

private void startStateBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStateBrowseButtonActionPerformed
    JFileChooser chooser = getStateFileChooser();
    int returnVal = chooser.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
        startGraphFileNameTextField.setText(chooser.getSelectedFile().getAbsolutePath());
    }
}//GEN-LAST:event_startStateBrowseButtonActionPerformed

private void resultFolderBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultFolderBrowseButtonActionPerformed
    JFileChooser chooser = new JFileChooser();
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int returnVal = chooser.showOpenDialog(this);
    if(returnVal == JFileChooser.APPROVE_OPTION) {
        resultsFolderTextField.setText(chooser.getSelectedFile().getAbsolutePath());
    }
}//GEN-LAST:event_resultFolderBrowseButtonActionPerformed

private void loadGrammarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGrammarButtonActionPerformed
    if (doLoadGrammar()) {
        enableScenarioSelection(true);
    }
}//GEN-LAST:event_loadGrammarButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chooseScenarioPanel;
    private javax.swing.JRadioButton createScenarioRadioButton;
    private javax.swing.JButton goButton;
    private javax.swing.JButton grammarBrowseButton;
    private javax.swing.JTextField grammarFileNameTextField;
    private javax.swing.JButton loadGrammarButton;
    private javax.swing.JPanel loadGrammarPanel;
    private javax.swing.JRadioButton loadSavedScenarioRadioButton;
    private javax.swing.JTextField ltsFileNameTextField;
    private javax.swing.JButton resultFolderBrowseButton;
    private javax.swing.JTextField resultGraphPrefixTextField;
    private javax.swing.JTextField resultsFolderTextField;
    private javax.swing.ButtonGroup scenarioSelectionButtonGroup;
    private javax.swing.JTextField startGraphFileNameTextField;
    private javax.swing.JButton startStateBrowseButton;
    private javax.swing.JPanel storeResultsPanel;
    // End of variables declaration//GEN-END:variables
                    
    // -----------------------------------------------------------------------
    // NON GUI METHODS
    // -----------------------------------------------------------------------
    private final ExtensionFilter ruleSystemFilter = groove.util.Groove.createRuleSystemFilter();
    private GraphGrammar grammar;
    private FileGps grammarLoader = new FileGps(false);
    private Scenario scenario;
   
    /** The scenario that has been selected.
     * Null if no valid scenario was selected.
     * @return
     */
    public Scenario getSelectedScenario() {
        return this.scenario;
    }
    
    /** The grammar that has been selected.
     * Null if no valid grammar was selected.
     * @return
     */
    public GraphGrammar getSelectedGrammar () {
        return this.grammar;
    }
    
    /** Loads the grammar corresponding to the the file which
     * name is in the #grammarFileNameTextField
     * Has as effect to initialise the #grammar
     * if loading went well. Also unvalidates the scenario.
     * @param grammarFile
     * @return true if the grammar was initialized correctly, false otherwise
     */
    boolean doLoadGrammar() {
        String grammarLocation = this.ruleSystemFilter.addExtension(getGrammarFileName());
        File grammarFile = new File(grammarLocation);
        File startGraphFile = null;
        String startGraphName = getStartGraphFileName();
        if (! startGraphName.equals("")) {
            startGraphFile = new File(startGraphName);
        }
        try {
            DefaultGrammarView grammarView = this.grammarLoader.unmarshal(grammarFile);
            if (startGraphFile != null) {
            	AspectGraph aspectStartGraph = new AspectGxl().unmarshalGraph(startGraphFile);
            	AspectualGraphView startGraphView = new AspectualGraphView(aspectStartGraph, grammarView.getProperties());
            	grammarView.setStartGraph(startGraphView);
            }     	
            if (grammarView.getStartGraph() == null) {
                showErrorDialog("The grammar does not have a start graph. Please select one.");
                return false;
            }
            grammar = grammarView.toGrammar();
            scenario = null; // reset the scenario
            return true;
        } catch (IOException ex) {
            showErrorDialog(ex.getMessage());
            return false;
        } catch (groove.view.FormatException ex) {
            showErrorDialog(ex.getMessage());
            return false;
        }
    }
    
    void doCreateScenario() {
        String grammarFileName = getGrammarFileName();
        if (grammarFileName == null || grammarFileName.equals("")) {
            showErrorDialog("Please choose a grammar first.");
            return;
        }
        assert grammar != null : "The grammar should not be null at that point";
        if (isCreateScenarioSelected()) {
            ScenarioSelectionDialog sd = new ScenarioSelectionDialog(owner, grammar);
            scenario = sd.showDialog();
        } else {
            // Scenario should be loaded
            throw new UnsupportedOperationException("Not yet supported");
        }
        
    }
    
    // -----------------------------------------------------------------------
    // HELPER GUI METHODS
    // -----------------------------------------------------------------------
    private JFrame owner;
    
    private JFileChooser grammarFileChooser;
    private JFileChooser stateFileChooser;
    /**
     * Returns the file chooser for grammar (GPR) files, lazily creating it first.
     */
    private JFileChooser getGrammarFileChooser() {
        if (grammarFileChooser == null) {
            grammarFileChooser = new GrooveFileChooser();
            grammarFileChooser.setAcceptAllFileFilterUsed(false);
            grammarFileChooser.setFileFilter(grammarLoader.getExtensionFilter());
            grammarFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        return grammarFileChooser;
    }
    
        /**
     * Returns the file chooser for graphs (GST) files, lazily creating it first.
     */
    private JFileChooser getStateFileChooser() {
        if (stateFileChooser == null) {
            stateFileChooser = new GrooveFileChooser();
            ExtensionFilter stateFilter = Groove.createStateFilter();
            stateFileChooser.addChoosableFileFilter(stateFilter);
            stateFileChooser.addChoosableFileFilter(Groove.createGxlFilter());
            stateFileChooser.setFileFilter(stateFilter);
        }
        return stateFileChooser;
    }
    
    private void showErrorDialog (String message) {
        JOptionPane.showMessageDialog(this,
                    message,
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
    }
 
    private String getGrammarFileName() {
        return grammarFileNameTextField.getText();
    }
    
    private String getStartGraphFileName () {
        return startGraphFileNameTextField.getText();
    }
    
    /** A folder name where results are to be stored. */
    public String getResultsFolderName () {
        return resultsFolderTextField.getText();
    }
    
    /** A prefix for the file where the lts is to be stored. */
    public String getLtsFileNamePrefix () {
        return ltsFileNameTextField.getText();
    }
    
    /** A prefix for the files where the result graphs are to be stored. */
    public String getResultFileNamePrefix () {
        return resultGraphPrefixTextField.getText();
    }
    /** Returns true if the create scenario option is chosen,
     * and false if the load scenario option is chosen.
     * @return
     */
    private boolean isCreateScenarioSelected () {
        return createScenarioRadioButton.isSelected();
    }
   
    private void enableScenarioSelection(boolean b) {
        for (Component c : chooseScenarioPanel.getComponents()) {
            c.setEnabled(b);
        }
    }
    
}
