/* * GROOVE: GRaphs for Object Oriented VErification *  * Copyright 2003--2007 University of Twente *  *  *  * Licensed under the Apache License, Version 2.0 (the "License"); *  * you may not use this file except in compliance with the License. *  * You may obtain a copy of the License at *  * http://www.apache.org/licenses/LICENSE-2.0 *  *  *  * Unless required by applicable law or agreed to in writing, *  * software distributed under the License is distributed on an *  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, *  * either express or implied. See the License for the specific *  * language governing permissions and limitations under the License. *  *  *  * $Id: ControlTransition.java,v 1.10 2008-01-30 11:13:57 fladder Exp $ */package groove.control;import groove.graph.AbstractEdge;import groove.trans.RuleSystem;import groove.view.FormatException;import java.util.Map;/** * Represents a transition in a control automaton. * Control transitions have pairs of guards and rule calls as labels. * A rule call is a rule with a sequence of input and output parameters. * A guard is a failure set, i.e., a set of rules that cannot be performed. * A transition is <i>virtual</i> if the rule names in the call and guard * are only given as strings, and <i>actual</i> if they are instantiated rules.  * @author Arend Rensink */public class CtrlTransition extends AbstractEdge<CtrlState,CtrlLabel,CtrlState> {    /**     * Creates a new control transition between two control states.     */    private CtrlTransition(CtrlState source, CtrlLabel label, CtrlState target) {        super(source, label, target);    }    /**     * Instantiates a virtual control transition using a given rule system.     * @param stateMap mapping from virtual control states to new (instantiated)     * control states. The map is assumed to contain images for the source and     * target of this transitions.     * @param rules the rule system used to instantiate the transition     * @return the instantiated transition, with the provided source and     * target states, and an instantiated control label.     * @throws FormatException if the rule or one of the failures do not exist in the given rule system     */    public CtrlTransition instantiate(Map<CtrlState,CtrlState> stateMap,            RuleSystem rules) throws FormatException {        CtrlState newSource = stateMap.get(source());        assert newSource != null;        CtrlState newTarget = stateMap.get(target());        assert newTarget != null;        return new CtrlTransition(newSource, label().instantiate(rules),            newTarget);    }}