/* GROOVE: GRaphs for Object Oriented VErification * Copyright 2003--2007 University of Twente * * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,  * either express or implied. See the License for the specific  * language governing permissions and limitations under the License. * * $Id: BuchiLocation.java,v 1.4 2008-02-22 13:02:44 rensink Exp $ */package groove.verify;import java.util.HashSet;import java.util.Set;/** * Location (i.e., state) of a Büchi automaton. * @author Harmen Kastenberg * @version $Revision$ $Date: 2008-02-22 13:02:44 $ */
public class BuchiLocation {	/** Constructs a new, non-accepting location. */	public BuchiLocation() {		this(false);	}	/** Constructs a location, with an option to set it to accepting. */	public BuchiLocation(boolean accepting) {		this.accepting = accepting;		this.locationCount = getBuchiCount();	}	/** Returns the set of outgoing transitions of this location. */	public Set<BuchiTransition> outTransitions() {		return transitions;	}	/**	 * Returns whether this location is accepting	 * @return the value of <code>accepting</code>	 */	public boolean isAccepting() {		return accepting;	}	/** Adds a transition to the outgoing transitions of this location. */	public void addTransition(BuchiTransition transition) {		if (transitions == null) {			transitions = new HashSet<BuchiTransition>();		}		transitions.add(transition);	}	/** Sets the Büchi location to accepting. */	public void setAccepting() {		this.accepting = true;	}	@Override	public String toString() {		if (locationCount != -1) {			return "b" + locationCount;		} else {			return "b??";		}	}	/** Increases the current location number, and increases the number. */	public int getBuchiCount() {		return BUCHI_COUNT++;	}	/** Flag indicating if this location is accepting. */	private boolean accepting;	/** Set of outgoing transitions of this location. */	private Set<BuchiTransition> transitions;	/** Identifying number of this location. */	private int locationCount;	/** Global counter to generate unique location numbers. */	private static int BUCHI_COUNT = 0;}
